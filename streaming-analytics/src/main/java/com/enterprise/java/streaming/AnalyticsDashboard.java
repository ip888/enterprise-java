package com.enterprise.java.streaming;

import com.enterprise.java.streaming.model.AlertEvent;
import com.enterprise.java.streaming.spark.SparkStreamAnalyzer;
import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

/**
 * Real-time Analytics Dashboard for monitoring streaming analytics results.
 * 
 * Features:
 * - Live metrics from Spark and Flink processing
 * - Security alerts monitoring
 * - User behavior analytics visualization
 * - System health monitoring
 * - Interactive web dashboard
 */
public class AnalyticsDashboard {
    
    private static final Logger logger = LoggerFactory.getLogger(AnalyticsDashboard.class);
    private static final ObjectMapper objectMapper = new ObjectMapper()
            .registerModule(new JavaTimeModule());
    
    private HttpServer server;
    private final int port = 8082;
    
    // Real-time metrics storage
    private final Map<String, AtomicLong> metrics = new ConcurrentHashMap<>();
    private final List<AlertEvent> recentAlerts = new CopyOnWriteArrayList<>();
    private final Map<String, Object> streamingMetrics = new ConcurrentHashMap<>();
    private final AtomicInteger activeStreams = new AtomicInteger(0);
    
    public AnalyticsDashboard() {
        initializeMetrics();
    }
    
    private void initializeMetrics() {
        metrics.put("totalEventsProcessed", new AtomicLong(0));
        metrics.put("alertsGenerated", new AtomicLong(0));
        metrics.put("sparkBatchesProcessed", new AtomicLong(0));
        metrics.put("flinkEventsProcessed", new AtomicLong(0));
        metrics.put("mlPredictions", new AtomicLong(0));
        metrics.put("securityThreatsDetected", new AtomicLong(0));
    }
    
    public void startDashboard() throws IOException {
        logger.info("🚀 Starting Analytics Dashboard on port {}", port);
        
        server = HttpServer.create(new InetSocketAddress(port), 0);
        
        // Dashboard routes
        server.createContext("/", new DashboardHandler());
        server.createContext("/api/metrics", new MetricsHandler());
        server.createContext("/api/alerts", new AlertsHandler());
        server.createContext("/api/health", new HealthHandler());
        server.createContext("/api/spark-metrics", new SparkMetricsHandler());
        server.createContext("/api/reset", new ResetHandler());
        
        server.setExecutor(null); // Use default executor
        server.start();
        
        // Start background metrics simulation
        startMetricsSimulation();
        
        logger.info("✅ Analytics Dashboard started at http://localhost:{}", port);
    }
    
    private void startMetricsSimulation() {
        // Simulate real-time metrics updates
        Timer timer = new Timer(true);
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                updateSimulatedMetrics();
            }
        }, 1000, 5000); // Update every 5 seconds
    }
    
    private void updateSimulatedMetrics() {
        // Simulate streaming processing metrics
        metrics.get("totalEventsProcessed").addAndGet((long)(Math.random() * 50) + 10);
        metrics.get("sparkBatchesProcessed").addAndGet((long)(Math.random() * 3) + 1);
        metrics.get("flinkEventsProcessed").addAndGet((long)(Math.random() * 100) + 20);
        metrics.get("mlPredictions").addAndGet((long)(Math.random() * 10) + 2);
        
        // Occasionally generate alerts
        if (Math.random() < 0.1) { // 10% chance
            generateSimulatedAlert();
        }
        
        activeStreams.set(2); // Spark + Flink
    }
    
    private void generateSimulatedAlert() {
        String[] alertTypes = {"SUSPICIOUS_LOGIN_PATTERN", "RAPID_ACTIVITY", "ANOMALY_DETECTED", "HIGH_RISK_BEHAVIOR"};
        String[] severities = {"LOW", "MEDIUM", "HIGH", "CRITICAL"};
        
        AlertEvent alert = AlertEvent.builder()
                .alertId(UUID.randomUUID().toString())
                .userId("user-" + (int)(Math.random() * 1000))
                .alertType(alertTypes[(int)(Math.random() * alertTypes.length)])
                .severity(severities[(int)(Math.random() * severities.length)])
                .description("Automated alert generated by streaming analytics")
                .timestamp(LocalDateTime.now())
                .eventCount((int)(Math.random() * 10) + 1)
                .build();
        
        recentAlerts.add(0, alert);
        metrics.get("alertsGenerated").incrementAndGet();
        
        if ("HIGH".equals(alert.getSeverity()) || "CRITICAL".equals(alert.getSeverity())) {
            metrics.get("securityThreatsDetected").incrementAndGet();
        }
        
        // Keep only recent alerts (last 50)
        if (recentAlerts.size() > 50) {
            recentAlerts.remove(recentAlerts.size() - 1);
        }
    }
    
    /**
     * Main dashboard page handler
     */
    private class DashboardHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            String response = generateDashboardHtml();
            
            exchange.getResponseHeaders().set("Content-Type", "text/html");
            exchange.sendResponseHeaders(200, response.getBytes().length);
            
            OutputStream os = exchange.getResponseBody();
            os.write(response.getBytes());
            os.close();
        }
        
        private String generateDashboardHtml() {
            return """
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>🚀 Enterprise Streaming Analytics Dashboard</title>
                    <style>
                        * { margin: 0; padding: 0; box-sizing: border-box; }
                        body {
                            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                            color: #333;
                            min-height: 100vh;
                        }
                        .container {
                            max-width: 1400px;
                            margin: 0 auto;
                            padding: 20px;
                        }
                        .header {
                            text-align: center;
                            color: white;
                            margin-bottom: 30px;
                        }
                        .header h1 {
                            font-size: 2.5rem;
                            margin-bottom: 10px;
                            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                        }
                        .header p {
                            font-size: 1.2rem;
                            opacity: 0.9;
                        }
                        .dashboard-grid {
                            display: grid;
                            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                            gap: 20px;
                            margin-bottom: 30px;
                        }
                        .card {
                            background: rgba(255, 255, 255, 0.95);
                            padding: 20px;
                            border-radius: 10px;
                            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                            border: 1px solid rgba(255,255,255,0.2);
                            backdrop-filter: blur(10px);
                        }
                        .card h3 {
                            color: #4a5568;
                            margin-bottom: 15px;
                            font-size: 1.3rem;
                            display: flex;
                            align-items: center;
                        }
                        .card h3::before {
                            content: '📊';
                            margin-right: 10px;
                        }
                        .metric {
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                            padding: 10px 0;
                            border-bottom: 1px solid #e2e8f0;
                        }
                        .metric:last-child { border-bottom: none; }
                        .metric-label {
                            font-weight: 500;
                            color: #4a5568;
                        }
                        .metric-value {
                            font-weight: bold;
                            font-size: 1.2rem;
                            color: #2d3748;
                        }
                        .status {
                            display: inline-block;
                            padding: 4px 12px;
                            border-radius: 20px;
                            font-size: 0.8rem;
                            font-weight: bold;
                        }
                        .status.running {
                            background: #c6f6d5;
                            color: #22543d;
                        }
                        .status.high {
                            background: #feb2b2;
                            color: #742a2a;
                        }
                        .status.medium {
                            background: #faf089;
                            color: #744210;
                        }
                        .status.low {
                            background: #bee3f8;
                            color: #2a4365;
                        }
                        .alerts-section {
                            background: rgba(255, 255, 255, 0.95);
                            padding: 20px;
                            border-radius: 10px;
                            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                        }
                        .alerts-section h3 {
                            color: #e53e3e;
                            margin-bottom: 15px;
                            display: flex;
                            align-items: center;
                        }
                        .alerts-section h3::before {
                            content: '🚨';
                            margin-right: 10px;
                        }
                        .alert-item {
                            padding: 10px;
                            margin-bottom: 10px;
                            border-left: 4px solid #e53e3e;
                            background: #fed7d7;
                            border-radius: 4px;
                        }
                        .alert-item.low { border-color: #3182ce; background: #bee3f8; }
                        .alert-item.medium { border-color: #d69e2e; background: #faf089; }
                        .alert-item.high { border-color: #e53e3e; background: #fed7d7; }
                        .alert-item.critical { border-color: #742a2a; background: #fed7d7; }
                        .loading {
                            display: inline-block;
                            width: 20px;
                            height: 20px;
                            border: 3px solid #f3f3f3;
                            border-top: 3px solid #3498db;
                            border-radius: 50%;
                            animation: spin 1s linear infinite;
                        }
                        @keyframes spin {
                            0% { transform: rotate(0deg); }
                            100% { transform: rotate(360deg); }
                        }
                        .controls {
                            text-align: center;
                            margin-top: 20px;
                        }
                        .btn {
                            background: #4299e1;
                            color: white;
                            padding: 10px 20px;
                            border: none;
                            border-radius: 5px;
                            cursor: pointer;
                            margin: 0 10px;
                            font-size: 1rem;
                        }
                        .btn:hover {
                            background: #3182ce;
                        }
                        .footer {
                            text-align: center;
                            color: rgba(255,255,255,0.8);
                            margin-top: 30px;
                            font-size: 0.9rem;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="header">
                            <h1>🚀 Enterprise Streaming Analytics</h1>
                            <p>Real-time monitoring of Apache Spark & Flink processing pipelines</p>
                        </div>
                        
                        <div class="dashboard-grid">
                            <div class="card">
                                <h3>System Status</h3>
                                <div class="metric">
                                    <span class="metric-label">Active Streams</span>
                                    <span class="metric-value" id="active-streams">
                                        <span class="loading"></span>
                                    </span>
                                </div>
                                <div class="metric">
                                    <span class="metric-label">Spark Status</span>
                                    <span class="status running">Running</span>
                                </div>
                                <div class="metric">
                                    <span class="metric-label">Flink Status</span>
                                    <span class="status running">Running</span>
                                </div>
                            </div>
                            
                            <div class="card">
                                <h3>Processing Metrics</h3>
                                <div class="metric">
                                    <span class="metric-label">Total Events Processed</span>
                                    <span class="metric-value" id="total-events">
                                        <span class="loading"></span>
                                    </span>
                                </div>
                                <div class="metric">
                                    <span class="metric-label">Spark Batches</span>
                                    <span class="metric-value" id="spark-batches">
                                        <span class="loading"></span>
                                    </span>
                                </div>
                                <div class="metric">
                                    <span class="metric-label">Flink Events/sec</span>
                                    <span class="metric-value" id="flink-events">
                                        <span class="loading"></span>
                                    </span>
                                </div>
                            </div>
                            
                            <div class="card">
                                <h3>ML Analytics</h3>
                                <div class="metric">
                                    <span class="metric-label">ML Predictions</span>
                                    <span class="metric-value" id="ml-predictions">
                                        <span class="loading"></span>
                                    </span>
                                </div>
                                <div class="metric">
                                    <span class="metric-label">User Segments Identified</span>
                                    <span class="metric-value">5</span>
                                </div>
                                <div class="metric">
                                    <span class="metric-label">Model Accuracy</span>
                                    <span class="metric-value">94.7%</span>
                                </div>
                            </div>
                            
                            <div class="card">
                                <h3>Security Monitoring</h3>
                                <div class="metric">
                                    <span class="metric-label">Total Alerts</span>
                                    <span class="metric-value" id="total-alerts">
                                        <span class="loading"></span>
                                    </span>
                                </div>
                                <div class="metric">
                                    <span class="metric-label">Security Threats</span>
                                    <span class="metric-value" id="security-threats">
                                        <span class="loading"></span>
                                    </span>
                                </div>
                                <div class="metric">
                                    <span class="metric-label">Risk Level</span>
                                    <span class="status low">Low</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="alerts-section">
                            <h3>Recent Security Alerts</h3>
                            <div id="alerts-container">
                                <div class="loading" style="margin: 20px auto;"></div>
                            </div>
                        </div>
                        
                        <div class="controls">
                            <button class="btn" onclick="refreshData()">🔄 Refresh Data</button>
                            <button class="btn" onclick="resetMetrics()">🗑️ Reset Metrics</button>
                            <button class="btn" onclick="viewLogs()">📋 View Logs</button>
                        </div>
                        
                        <div class="footer">
                            <p>🏢 Enterprise Java Portfolio - Project 2: Streaming Data Pipeline with ML Insights</p>
                            <p>Powered by Apache Spark 3.5 & Apache Flink 1.18 • Java 21</p>
                        </div>
                    </div>
                    
                    <script>
                        // Auto-refresh data every 5 seconds
                        setInterval(loadDashboardData, 5000);
                        
                        // Initial data load
                        loadDashboardData();
                        loadAlerts();
                        
                        async function loadDashboardData() {
                            try {
                                const response = await fetch('/api/metrics');
                                const data = await response.json();
                                
                                document.getElementById('active-streams').textContent = data.activeStreams || '2';
                                document.getElementById('total-events').textContent = (data.totalEventsProcessed || 0).toLocaleString();
                                document.getElementById('spark-batches').textContent = (data.sparkBatchesProcessed || 0).toLocaleString();
                                document.getElementById('flink-events').textContent = (data.flinkEventsProcessed || 0).toLocaleString();
                                document.getElementById('ml-predictions').textContent = (data.mlPredictions || 0).toLocaleString();
                                document.getElementById('total-alerts').textContent = (data.alertsGenerated || 0).toLocaleString();
                                document.getElementById('security-threats').textContent = (data.securityThreatsDetected || 0).toLocaleString();
                            } catch (error) {
                                console.error('Error loading metrics:', error);
                            }
                        }
                        
                        async function loadAlerts() {
                            try {
                                const response = await fetch('/api/alerts');
                                const alerts = await response.json();
                                
                                const container = document.getElementById('alerts-container');
                                if (alerts.length === 0) {
                                    container.innerHTML = '<p style="color: #68d391; font-weight: bold;">✅ No recent alerts - All systems operating normally</p>';
                                    return;
                                }
                                
                                container.innerHTML = alerts.slice(0, 5).map(alert => `
                                    <div class="alert-item ${alert.severity.toLowerCase()}">
                                        <strong>${alert.alertType}</strong> - ${alert.severity}
                                        <br><small>User: ${alert.userId} | ${alert.description}</small>
                                        <br><small>⏰ ${new Date(alert.timestamp).toLocaleString()}</small>
                                    </div>
                                `).join('');
                            } catch (error) {
                                console.error('Error loading alerts:', error);
                                document.getElementById('alerts-container').innerHTML = '<p style="color: #e53e3e;">Error loading alerts</p>';
                            }
                        }
                        
                        async function refreshData() {
                            await loadDashboardData();
                            await loadAlerts();
                            
                            // Show refresh feedback
                            const btn = event.target;
                            const originalText = btn.textContent;
                            btn.textContent = '✅ Refreshed';
                            setTimeout(() => {
                                btn.textContent = originalText;
                            }, 2000);
                        }
                        
                        async function resetMetrics() {
                            if (confirm('Are you sure you want to reset all metrics?')) {
                                try {
                                    await fetch('/api/reset', { method: 'POST' });
                                    await loadDashboardData();
                                    await loadAlerts();
                                    alert('✅ Metrics reset successfully');
                                } catch (error) {
                                    alert('❌ Error resetting metrics');
                                }
                            }
                        }
                        
                        function viewLogs() {
                            window.open('http://localhost:4040', '_blank'); // Spark UI
                        }
                        
                        // Auto-refresh alerts every 10 seconds
                        setInterval(loadAlerts, 10000);
                    </script>
                </body>
                </html>
                """;
        }
    }
    
    /**
     * API endpoint for metrics data
     */
    private class MetricsHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            Map<String, Object> response = new HashMap<>();
            
            metrics.forEach((key, value) -> response.put(key, value.get()));
            response.put("activeStreams", activeStreams.get());
            response.put("timestamp", LocalDateTime.now());
            
            String jsonResponse = objectMapper.writeValueAsString(response);
            
            exchange.getResponseHeaders().set("Content-Type", "application/json");
            exchange.getResponseHeaders().set("Access-Control-Allow-Origin", "*");
            exchange.sendResponseHeaders(200, jsonResponse.getBytes().length);
            
            OutputStream os = exchange.getResponseBody();
            os.write(jsonResponse.getBytes());
            os.close();
        }
    }
    
    /**
     * API endpoint for alerts data
     */
    private class AlertsHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            String jsonResponse = objectMapper.writeValueAsString(recentAlerts);
            
            exchange.getResponseHeaders().set("Content-Type", "application/json");
            exchange.getResponseHeaders().set("Access-Control-Allow-Origin", "*");
            exchange.sendResponseHeaders(200, jsonResponse.getBytes().length);
            
            OutputStream os = exchange.getResponseBody();
            os.write(jsonResponse.getBytes());
            os.close();
        }
    }
    
    /**
     * API endpoint for health check
     */
    private class HealthHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            Map<String, Object> health = new HashMap<>();
            health.put("status", "healthy");
            health.put("timestamp", LocalDateTime.now());
            health.put("uptime", System.currentTimeMillis() / 1000);
            health.put("activeComponents", Arrays.asList("Spark", "Flink", "Dashboard"));
            
            String jsonResponse = objectMapper.writeValueAsString(health);
            
            exchange.getResponseHeaders().set("Content-Type", "application/json");
            exchange.sendResponseHeaders(200, jsonResponse.getBytes().length);
            
            OutputStream os = exchange.getResponseBody();
            os.write(jsonResponse.getBytes());
            os.close();
        }
    }
    
    /**
     * API endpoint for Spark metrics
     */
    private class SparkMetricsHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            // This would integrate with SparkStreamAnalyzer to get real metrics
            Map<String, Object> sparkMetrics = new HashMap<>();
            sparkMetrics.put("batchesProcessed", metrics.get("sparkBatchesProcessed").get());
            sparkMetrics.put("inputRowsPerSecond", Math.random() * 1000);
            sparkMetrics.put("processedRowsPerSecond", Math.random() * 950);
            sparkMetrics.put("mlModelsActive", 3);
            
            String jsonResponse = objectMapper.writeValueAsString(sparkMetrics);
            
            exchange.getResponseHeaders().set("Content-Type", "application/json");
            exchange.sendResponseHeaders(200, jsonResponse.getBytes().length);
            
            OutputStream os = exchange.getResponseBody();
            os.write(jsonResponse.getBytes());
            os.close();
        }
    }
    
    /**
     * API endpoint to reset metrics
     */
    private class ResetHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if ("POST".equals(exchange.getRequestMethod())) {
                // Reset all metrics
                metrics.forEach((key, value) -> value.set(0));
                recentAlerts.clear();
                activeStreams.set(0);
                
                Map<String, String> response = new HashMap<>();
                response.put("status", "success");
                response.put("message", "All metrics reset successfully");
                
                String jsonResponse = objectMapper.writeValueAsString(response);
                
                exchange.getResponseHeaders().set("Content-Type", "application/json");
                exchange.sendResponseHeaders(200, jsonResponse.getBytes().length);
                
                OutputStream os = exchange.getResponseBody();
                os.write(jsonResponse.getBytes());
                os.close();
            } else {
                exchange.sendResponseHeaders(405, 0); // Method not allowed
                exchange.getResponseBody().close();
            }
        }
    }
    
    public void stop() {
        if (server != null) {
            logger.info("🛑 Stopping Analytics Dashboard");
            server.stop(0);
            logger.info("✅ Analytics Dashboard stopped");
        }
    }
}