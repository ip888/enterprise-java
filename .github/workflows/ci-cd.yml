name: Enterprise Java Portfolio CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx2g'

jobs:
  test:
    name: Test & Quality Gate
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: portfolio_pass
          POSTGRES_USER: portfolio_user
          POSTGRES_DB: portfolio_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      kafka:
        image: confluentinc/cp-kafka:7.4.0
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
        options: >-
          --health-cmd "kafka-broker-api-versions --bootstrap-server localhost:9092"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3
        ports:
          - 9092:9092

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'graalvm'
        cache: maven

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

    - name: Wait for services
      run: |
        echo "Waiting for PostgreSQL..."
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432; do sleep 2; done'
        echo "Waiting for Redis..."
        timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 2; done'
        echo "Services are ready!"

    - name: Run unit tests
      run: |
        find . -name "pom.xml" -not -path "./target/*" | while read pom; do
          dir=$(dirname "$pom")
          echo "Running tests in $dir"
          (cd "$dir" && mvn clean test)
        done

    - name: Run integration tests
      run: |
        find . -name "pom.xml" -not -path "./target/*" | while read pom; do
          dir=$(dirname "$pom")
          echo "Running integration tests in $dir"
          (cd "$dir" && mvn verify -P integration-tests)
        done

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: '**/target/surefire-reports/*.xml'
        reporter: java-junit

    - name: Code coverage
      run: |
        find . -name "pom.xml" -not -path "./target/*" | while read pom; do
          dir=$(dirname "$pom")
          (cd "$dir" && mvn jacoco:report)
        done

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./**/target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'graalvm'
        cache: maven

    - name: Run OWASP Dependency Check
      run: |
        find . -name "pom.xml" -not -path "./target/*" | while read pom; do
          dir=$(dirname "$pom")
          echo "Security scan in $dir"
          (cd "$dir" && mvn org.owasp:dependency-check-maven:check)
        done

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: '**/target/dependency-check-report.html'

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'graalvm'
        cache: maven

    - name: Build microservices
      run: |
        find ./microservices -name "pom.xml" | while read pom; do
          dir=$(dirname "$pom")
          service=$(basename "$dir")
          echo "Building $service"
          (cd "$dir" && mvn clean compile package -DskipTests)
        done

    - name: Build streaming applications
      run: |
        find ./streaming-analytics -name "pom.xml" | while read pom; do
          dir=$(dirname "$pom")
          app=$(basename "$dir")
          echo "Building $app"
          (cd "$dir" && mvn clean compile package -DskipTests)
        done

    - name: Build Docker images
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Building Docker images..."
        # Build images for each microservice
        for service in microservices/*/; do
          if [ -f "$service/Dockerfile" ]; then
            service_name=$(basename "$service")
            echo "Building Docker image for $service_name"
            docker build -t "portfolio/$service_name:${{ github.sha }}" "$service"
            docker tag "portfolio/$service_name:${{ github.sha }}" "portfolio/$service_name:latest"
          fi
        done

    - name: Run container security scan
      if: github.ref == 'refs/heads/main'
      run: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Scan images
        for image in $(docker images --format "table {{.Repository}}:{{.Tag}}" | grep portfolio | grep -v REPOSITORY); do
          echo "Scanning $image"
          trivy image --exit-code 0 --format table "$image"
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          **/target/*.jar
          **/target/*.war

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'graalvm'

    - name: Install JMeter
      run: |
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz
        tar -xzf apache-jmeter-5.6.2.tgz
        sudo mv apache-jmeter-5.6.2 /opt/jmeter
        echo "/opt/jmeter/bin" >> $GITHUB_PATH

    - name: Run performance tests
      run: |
        # Start lightweight services for performance testing
        echo "Starting performance test environment..."
        # jmeter -n -t scripts/performance-tests/api-load-test.jmx -l results.jtl

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: '**/*.jtl'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "This would typically deploy to DigitalOcean Kubernetes"
        # kubectl apply -f infrastructure/kubernetes/staging/

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "This would typically deploy to DigitalOcean with blue/green strategy"
        # kubectl apply -f infrastructure/kubernetes/production/

  notification:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi