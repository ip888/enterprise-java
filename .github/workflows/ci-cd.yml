name: Enterprise Java Portfolio CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  statuses: write

env:
  JAVA_VERSION: "21"
  MAVEN_OPTS: "-Xmx2g"

jobs:
  test:
    name: Test & Quality Gate
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: portfolio_pass
          POSTGRES_USER: portfolio_user
          POSTGRES_DB: portfolio_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      kafka:
        image: bitnami/kafka:3.6.0
        env:
          # KRaft mode configuration (Bitnami image)
          KAFKA_CFG_NODE_ID: 1
          KAFKA_CFG_PROCESS_ROLES: "controller,broker"
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
          KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
          KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092"
          KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
          KAFKA_CFG_LOG_DIRS: "/tmp/kraft-combined-logs"
          # Bitnami specific settings
          KAFKA_KRAFT_CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
          KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
          KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
          KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
          ALLOW_PLAINTEXT_LISTENER: "yes"
        options: >-
          --health-cmd "kafka-topics.sh --bootstrap-server localhost:9092 --list"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 60s
        ports:
          - 9092:9092

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full git history
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global --add safe.directory /github/workspace
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          echo "Git configuration completed"
          pwd
          ls -la
          git status || echo "Git status failed, but continuing..."

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "graalvm"
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client redis-tools netcat-traditional

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U portfolio_user; do sleep 2; done'
          echo "Waiting for Redis..."
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping | grep -q PONG; do sleep 2; done'
          echo "Waiting for Kafka..."
          timeout 120 bash -c 'until nc -z localhost 9092; do echo "Waiting for Kafka..."; sleep 5; done' || echo "Kafka timeout, continuing..."
          echo "Services are ready!"

      - name: Build and test all modules
        run: |
          echo "Building and testing all modules from root..."
          mvn clean compile -B -U -Dmaven.gitcommitid.skip=true

      - name: Run unit tests
        run: |
          echo "Running unit tests for all modules..."
          mvn test -B -Duser.timezone=UTC -Dmaven.gitcommitid.skip=true

      - name: Run integration tests
        run: |
          echo "Running integration tests for all modules..."
          mvn verify -P integration-tests -B -Dmaven.gitcommitid.skip=true

      - name: Generate test report
        uses: dorny/test-reporter@v1.9.1
        if: success() || failure()
        with:
          name: Maven Tests
          path: "**/target/surefire-reports/*.xml"
          reporter: java-junit
          fail-on-error: false
        continue-on-error: true

      - name: Publish test results summary
        if: success() || failure()
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY

          # Count test results
          total_tests=0
          passed_tests=0
          failed_tests=0

          for report in $(find . -name "*.xml" -path "*/target/surefire-reports/*"); do
            if [ -f "$report" ]; then
              tests=$(grep -o 'tests="[0-9]*"' "$report" | grep -o '[0-9]*' | head -1 || echo "0")
              failures=$(grep -o 'failures="[0-9]*"' "$report" | grep -o '[0-9]*' | head -1 || echo "0")
              errors=$(grep -o 'errors="[0-9]*"' "$report" | grep -o '[0-9]*' | head -1 || echo "0")
              
              total_tests=$((total_tests + tests))
              failed_tests=$((failed_tests + failures + errors))
            fi
          done

          passed_tests=$((total_tests - failed_tests))

          echo "- **Total Tests:** $total_tests" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed:** ✅ $passed_tests" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed:** ❌ $failed_tests" >> $GITHUB_STEP_SUMMARY

          if [ $failed_tests -eq 0 ]; then
            echo "- **Status:** 🎉 All tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** ⚠️ Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Code coverage
        run: |
          find . -name "pom.xml" -not -path "./target/*" | while read pom; do
            dir=$(dirname "$pom")
            echo "Generating coverage report in $dir"
            (cd "$dir" && mvn jacoco:report -Duser.timezone=UTC) || echo "Coverage report failed for $dir"
          done

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          files: ./**/target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full git history
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "graalvm"
          cache: maven

      - name: Run OWASP Dependency Check
        run: |
          find . -name "pom.xml" -not -path "./target/*" | while read pom; do
            dir=$(dirname "$pom")
            echo "Security scan in $dir"
            (cd "$dir" && mvn org.owasp:dependency-check-maven:check)
          done

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: "**/target/dependency-check-report.html"

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full git history
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "graalvm"
          cache: maven

      - name: Build microservices
        run: |
          find ./microservices -name "pom.xml" | while read pom; do
            dir=$(dirname "$pom")
            service=$(basename "$dir")
            echo "Building $service"
            (cd "$dir" && mvn clean compile package -DskipTests)
          done

      - name: Build streaming applications
        run: |
          find ./streaming-analytics -name "pom.xml" | while read pom; do
            dir=$(dirname "$pom")
            app=$(basename "$dir")
            echo "Building $app"
            (cd "$dir" && mvn clean compile package -DskipTests)
          done

      - name: Build Docker images
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Building Docker images..."
          # Build images for each microservice
          for service in microservices/*/; do
            if [ -f "$service/Dockerfile" ]; then
              service_name=$(basename "$service")
              echo "Building Docker image for $service_name"
              docker build -t "portfolio/$service_name:${{ github.sha }}" "$service"
              docker tag "portfolio/$service_name:${{ github.sha }}" "portfolio/$service_name:latest"
            fi
          done

      - name: Run container security scan
        if: github.ref == 'refs/heads/main'
        run: |
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

          # Scan images
          for image in $(docker images --format "table {{.Repository}}:{{.Tag}}" | grep portfolio | grep -v REPOSITORY); do
            echo "Scanning $image"
            trivy image --exit-code 0 --format table "$image"
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/target/*.jar
            **/target/*.war

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full git history
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "graalvm"

      - name: Install JMeter
        run: |
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz
          tar -xzf apache-jmeter-5.6.2.tgz
          sudo mv apache-jmeter-5.6.2 /opt/jmeter
          echo "/opt/jmeter/bin" >> $GITHUB_PATH

      - name: Run performance tests
        run: |
          # Start lightweight services for performance testing
          echo "Starting performance test environment..."
          # jmeter -n -t scripts/performance-tests/api-load-test.jmx -l results.jtl

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: "**/*.jtl"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/main'
    # environment: staging  # Uncomment when staging environment is configured in GitHub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full git history
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "This would typically deploy to DigitalOcean Kubernetes"
          # kubectl apply -f infrastructure/kubernetes/staging/

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    # environment: production  # Uncomment when production environment is configured in GitHub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full git history
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "This would typically deploy to DigitalOcean with blue/green strategy"
          # kubectl apply -f infrastructure/kubernetes/production/

  notification:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
